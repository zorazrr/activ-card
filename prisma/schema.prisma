// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Badge {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  url          Bytes
  student_id   String    @db.ObjectId
  student      Student   @relation(fields: [student_id], references: [id])
  set_id       String    @db.ObjectId
  set          Set       @relation(fields: [set_id], references: [id])
  classroom_id String    @db.ObjectId
  classroom    Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
}

model Card {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  term            String
  definition      String
  set_id          String       @db.ObjectId
  set             Set          @relation(fields: [set_id], references: [id], onDelete: Cascade)
  set_progress_id String?      @db.ObjectId
  set_progress    SetProgress? @relation(fields: [set_progress_id], references: [id])
}

model SetProgress {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  set_id          String  @db.ObjectId
  set             Set     @relation(fields: [set_id], references: [id], onDelete: Cascade)
  student_id      String  @db.ObjectId
  student         Student @relation(fields: [student_id], references: [id], onDelete: Cascade)
  completed_cards Card[]
  badge_id        String  @db.ObjectId
}

model Classroom {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  student_ids String[]   @db.ObjectId
  students    Student[]  @relation(fields: [student_ids], references: [id])
  teacher_id  String     @db.ObjectId
  teacher     Teacher    @relation(fields: [teacher_id], references: [id])
  sets        Set[]
  classCode   ClassCode?
  badge       Badge[]
}

model ClassCode {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  code         String    @unique
  classroom_id String    @unique @db.ObjectId
  class        Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
}

model Student {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  user_id       String        @unique @db.ObjectId
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name          String
  email         String
  classroom_ids String[]      @db.ObjectId
  classrooms    Classroom[]   @relation(fields: [classroom_ids], references: [id])
  set_progress  SetProgress[]
  badge         Badge[]
}

model Teacher {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String      @unique @db.ObjectId
  user       User        @relation(fields: [user_id], references: [id])
  name       String
  classrooms Classroom[]
}

model Set {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  classroom_id String        @db.ObjectId
  classroom    Classroom     @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  set_progress SetProgress[]
  cards        Card[]
  check_mode   CheckMode
  answer_mode  AnswerMode
  pomodoro     Boolean
  badge        Badge[]
}

enum CheckMode {
  AI_CHECK
  WORD_BY_WORD
}

enum AnswerMode {
  TYPING
  SPEAKING
}

enum Role {
  TEACHER
  STUDENT
  UNKNOWN
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  role          Role?     @default(UNKNOWN)
  teacher       Teacher?
  student       Student?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map(name: "refresh_token")
  access_token      String? @map(name: "access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
